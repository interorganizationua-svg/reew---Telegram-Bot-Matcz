import os
import re

from datetime import datetime, timedelta, time

from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from buttonKey import ButtonText

import random
import string

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram import Router, F
from aiogram.utils.chat_action import ChatActionSender
from aiogram.filters import CommandStart, Command

from handlers import langueage_reew as lg, start, globalMenu as Menu, factNight
from setting import user_dict, chat_reew, add_chatReew, last_activity, bot, dp


#–¥–∏—Å–ø–µ—Ç—á–µ—Ä 
questionnaire_router  = Router()

async def update_data_reew(chat_id):
    last_time = datetime.now()
    last_activity[chat_id] = last_time  # Store the last activity timestamp


@questionnaire_router.message(F.text == 'üõí –ú–∞–≥–∞–∑–∏–Ω')
async def shops_reew(message: Message, state: FSMContext):
    chat_id = message.chat.id

    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ")
        return 

    if chat_id in user_dict:
        shop_message = (
            f"<b>–ú–∞–≥–∞–∑–∏–Ω Reew</b>\n\n"
            f"<b>üí∞ –ü—Ä–∞–π—Å–∏:</b>\n"
            f"‚Äî‚ù§Ô∏è 10 –°–µ—Ä–¥–µ—Ü—å : <b> 5 –≥—Ä–Ω</b>\n"
            f"‚ÄîüìÖ –ú—ñ—Å—è—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞: <b> 210 –≥—Ä–Ω</b>\n\n"
                        
            f"<b>–©–æ –¥–∞—î –ø—ñ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"1. ‚ú® <b>–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b> –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞ –≤ –∞–Ω–∫–µ—Ç—ñ\n"
            f"2. üö´ <b>–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ–± –≤–æ–Ω–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑'—è–≤–ª—è–ª–∏—Å—è\n"
            f"3. üí¨ <b>–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è</b> –±–µ–∑ –Ω–∞–±—Ä–∏–¥–ª–∏–≤–æ—ó —Ä–µ–∫–ª–∞–º–∏\n"
            f"4. üîó <b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å</b> —É —Ñ–ª—ñ—Ä—Ç-–¥—ñ–∞–ª–æ–≥–∞—Ö\n"
            f"5. ‚úèÔ∏è <b>–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É</b> —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç\n\n"

            f"–ê–∫—Ü—ñ—è –¥—ñ–π—Å–Ω–∞ –∑ –¥–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å–∞ —ñ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä—Å–∞!\n\n"

            f"<i>–ü—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –®–µ—Ä—ñ—Ñ–∞–º.</i>\n"
        )
        kb_list = [
                    [InlineKeyboardButton(text="–ó–∞–º–æ–≤–∏—Ç–∏ ‚ù§Ô∏è", callback_data="error_messages"), InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="error_messages")],
                    [InlineKeyboardButton(text="–ü–∏—Ç–∞–Ω–Ω—è", callback_data="error_messages")]

                ] 
        kb = InlineKeyboardMarkup(inline_keyboard=kb_list)

        await message.answer(shop_message, reply_markup=kb, parse_mode="HTMl")   
    else:
        await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É —â–æ–± —â–æ—Å—å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ú–∞–≥–∞–∑–∏–Ω, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å /start.")

MAIN_MENU = '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'

user_state = {}

def update_user_state(user_id, state):
    user_state[user_id] = state

def get_user_state(user_id):
    return user_state.get(user_id, MAIN_MENU)

@questionnaire_router.message(lambda message: message.text == MAIN_MENU)
async def setting_users(message: Message, state: FSMContext):
    chat_id = message.chat.id
    update_user_state(message.from_user.id, MAIN_MENU)


    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ")
        return 

    if chat_id in user_dict:
        chat_settings = f"‚öôÔ∏è–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"

        keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                           keyboard= [ 
                                                                
                                            [KeyboardButton(text='–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å'), KeyboardButton(text='–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞')],
                                            [KeyboardButton(text='–ù–∞–∑–∞–¥')],

                                                    ])
        await message.answer(chat_settings, reply_markup=keyboard_key)   
    else:
        await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å /start.")


@dp.message(lambda message: message.text == '–ó–º—ñ–Ω–∏—Ç—å –º–æ–≤—É')
async def request_transltation(message: types.Message, state: FSMContext, current_language: str):

    message_reew = lg.translations[current_language]['choose_language']

    kb_list = [
                    [InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="ua_lang"), InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="russian_langueage")],

                ] 
    kb = InlineKeyboardMarkup(inline_keyboard=kb_list)

    await message.answer(text=message_reew, reply_markup=kb, parse_mode="HTML")

@questionnaire_router.message(lambda message: message.text == ButtonText.–ù–∞–∑–∞–¥)
async def back_setting(message: Message, state: FSMContext, current_language: str):  
    user_id = message.from_user.id
    current_state = get_user_state(user_id)

    if current_state == MAIN_MENU:
        update_user_state(user_id, Menu.MAIN_SCREEN)
        await Menu.display_menu_global(message, state, current_language)
    else:
        await Menu.display_menu_global(message, state, current_language)


@questionnaire_router.message(lambda message: message.text in ["–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"])
async def check_profiles_(message: Message, state: FSMContext, current_language: str):
    chat_id = message.chat.id

    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ")
        return 

    if chat_id in user_dict:
        profile_info = user_dict[chat_id]

        partner_age_range = user_dict[chat_id]['partner_age_range']
        format_age = ', '.join(partner_age_range)

        check_profiles_user = ( f"<b>{lg.translations[current_language]['You']}</b> {profile_info['name']} ({profile_info['gender']}, {profile_info['age']} —Ä–æ–∫—ñ–≤, {profile_info['location']}) \n"
                                f"<b>{lg.translations[current_language]['search']}</b> {profile_info['search_gender']}, {format_age}\n"
                                f"<b>{lg.translations[current_language]['topic']}</b>  {profile_info['topic_chat']} \n" 
                                f"<b>{lg.translations[current_language]['bonus']}</b> 0 ‚ù§Ô∏è \n" 
                                )
        
        username = profile_info['username']
        
        if profile_info['username']:
            check_profiles_user += f'<b>Username:</b> @{username}'

        keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                           keyboard= [ 
                                                                
                                            [KeyboardButton(text='üë§ –ó–º—ñ–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'), KeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å')],
                                            [KeyboardButton(text='–ù–∞–∑–∞–¥')]

                                                    ])
        src = f'photos/{chat_id}.jpg'
        if os.path.exists(src):
            with open(src, 'rb') as photo:        
                await message.answer_photo(
                types.FSInputFile(path=src), caption=check_profiles_user, reply_markup=keyboard_key, parse_mode="HTML")
        else:
            await message.answer(check_profiles_user, reply_markup=keyboard_key, parse_mode="HTML")
    else:
        kbs = types.ReplyKeyboardRemove()
        await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ü—Ä–æ—Ñ—ñ–ª—å, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å /start.", reply_markup=kbs)

@questionnaire_router.message(lambda message: message.text in ["–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"])
async def delete_account(message: Message, state:FSMContext):
    chat_id = message.chat.id

    if chat_id not in user_dict and 'confirm_profiler' not in user_dict:
        await bot.send_message(chat_id,"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —è–∫—â–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")

    if chat_id in user_dict:

        keyboard_key = ReplyKeyboardMarkup(row_width= 2,resize_keyboard=True, 
                                    keyboard = [

                                        [KeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'), KeyboardButton(text='–í—ñ–¥—Ö–∏–ª–∏—Ç–∏')]
                                        ])
        
        await message.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —â–æ –≤–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –±–æ—Ç–∞. –í—ñ–¥—Ö–∏–ª—ñ—Ç—å —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è", reply_markup=keyboard_key)
    

@questionnaire_router.message(lambda message: message.text in ["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"] )
async def delete_account(message: Message, state:FSMContext):
    chat_id = message.chat.id
    if chat_id not in user_dict and 'confirm_profiler' not in user_dict:
        await bot.send_message(chat_id,"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —è–∫—â–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")

    if chat_id in user_dict and 'confirm_profiler' in user_dict:
        del user_dict[chat_id]
        await bot.send_message(chat_id,"–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–∏–ª–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –±–æ—Ç–∞")

@questionnaire_router.message(lambda message: message.text in ["–í—ñ–¥—Ö–∏–ª–∏—Ç–∏"] )
async def delete_account(message: Message, state:FSMContext, current_language: str):
    chat_id = message.chat.id
    if chat_id not in user_dict and 'confirm_profiler' not in user_dict:
        await bot.send_message(chat_id,"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —è–∫—â–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")

    if chat_id in user_dict and 'username' in user_dict:
        await Menu.display_menu_global(message, state, current_language)


@questionnaire_router.message(lambda message: message.text == "–ñ–∏–≤—á–∏–∫–∏")
async def lives_profiles(message: Message, state: FSMContext, current_language: str):
    chat_id = message.chat.id

    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ü—ñ–∫–∞–≤–æ —Å–∫—ñ–ª—å–∫–∏ –æ–Ω–ª–∞–π–Ω")
        return 

    if chat_id in user_dict:

        
        await update_data_reew(chat_id)

        online_girls = 0 
        online_boys = 0

        topic_online_boys = 0
        topic_online_girls = 0
        topic_online_boys_18 = 0
        topic_online_girls_18 = 0

        currently_time = datetime.now()
        print(f"last_activity: {last_activity}")

        online_users = [user_id for user_id, last_time in last_activity.items()
                        if currently_time - last_time < timedelta(minutes=10)]

        print(f"Online users: {online_users}")
        
        for_you_count = 0

        # Count online profiles
        for user_id in online_users:
            if user_id in user_dict:
                #–ø–æ—à—É–∫ –∑–∞ –≥–µ–Ω–¥–µ—Ä–æ–º

                profile = user_dict[user_id]
                if profile['gender'] == lg.translations[current_language]['girl']:
                    online_girls += 1
                elif profile['gender'] == lg.translations[current_language]['boy']:
                    online_boys += 1

                #–ø–æ—à—É–∫ –∑–∞ —Ç–æ–ø–æ–º
                if profile['topic_chat'] == lg.translations[current_language]['selected_topic_but1']:
                    if profile['gender'] == lg.translations[current_language]['boy']:
                        topic_online_boys += 1
                    elif profile['gender'] == lg.translations[current_language]['girl']:
                            topic_online_girls += 1

                elif profile['topic_chat'] == lg.translations[current_language]['selected_topic_but2']:
                    if profile['gender'] == lg.translations[current_language]['boy']:
                        topic_online_boys_18 += 1
                    elif profile['gender'] == lg.translations[current_language]['girl']:
                            topic_online_girls_18 += 1        
                
                #–ø–æ—à—É–∫ –∑–∞ –≥–µ–Ω–¥–µ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                if profile['gender'] == lg.translations[current_language]['girl']:
                    if profile['search_gender'] == lg.translations[current_language]['his']:
                            for_you_count += 1
                    elif profile['gender'] == lg.translations[current_language]['boy']:
                        if profile['search_gender'] == lg.translations[current_language]['her']:
                                for_you_count += 1

        together_online = online_girls + online_boys


        if together_online == 0:
            await bot.send_message(chat_id, "–ù–∞—Ä–∞–∑—ñ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î üòî")
        else:
            profiles_text = (
                f"<b>üîπ –ê–∫—Ç–∏–≤–Ω–∏—Ö –≤ —á–∞—Ç—ñ</b>:\n"
                f"üëß –î—ñ–≤—á–∞—Ç: {online_girls} | üë¶ –•–ª–æ–ø—Ü—ñ–≤: {online_boys}\n\n"
                f"<b>üíô –£ –ó–≤–∏—á–∞–π–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ</b>:\n"
                f"üëß –î—ñ–≤—á–∞—Ç: {topic_online_girls} | üë¶ –•–ª–æ–ø—Ü—ñ–≤: {topic_online_boys}\n\n"
                f"<b>üíï –£ –§–ª—ñ—Ä—Ç –¥—ñ–∞–ª–æ–∑—ñ</b>:\n"
                f"üëß –î—ñ–≤—á–∞—Ç: {topic_online_girls_18} | üë¶ –•–ª–æ–ø—Ü—ñ–≤: {topic_online_boys_18} \n\n"

                f"ü´µ –û–Ω–ª–∞–π–Ω –¥–ª—è —Ç–µ–±–µ: {for_you_count}\n"
                f"üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏üî∏\n"
                f"üåê –í—Å—å–æ–≥–æ –æ–Ω–ª–∞–π–Ω: {together_online}\n"
            )
            
            kb_list = [
                [InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏", callback_data="error_messages")]
            ] 
            kb = InlineKeyboardMarkup(inline_keyboard=kb_list)
            
            await message.answer(profiles_text, reply_markup=kb, parse_mode='HTML')
    else:
        await message.answer("–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–∫—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–ª–∞–π–Ω, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å /start.")


@dp.message(lambda message: message.text == "üîé –ü–æ—à—É–∫")
async def search_profiles(message: Message, current_language: str, state: FSMContext):
    chat_id = message.chat.id


    if chat_id in chat_reew:
        await bot.send_message(chat_id, "–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ")
        return 
    
    if chat_id in user_dict and 'confirm_profiler' in user_dict[chat_id]:
        #add user in searching reew
        add_chatReew.add(chat_id)

        #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        await update_data_reew(chat_id)
        partner_age_range = user_dict[chat_id]['partner_age_range'] 
        format_age = ', '.join(partner_age_range)

        profile_info = user_dict[chat_id]
        send_request = f"üîé –®—É–∫–∞—é —Ç–æ–±—ñ {profile_info['search_gender']} ({format_age}), –¥—ñ–∞–ª–æ–≥ {profile_info['topic_chat']} "
        keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                           keyboard= [ 
                                                                
                                            [KeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫')]

                                                    ])        
        await message.answer(send_request, reply_markup=keyboard_key)

        #found parter in REEW
        search_partner = await find_partner(chat_id, profile_info, current_language)
        
        if search_partner:
            for match in search_partner:
                if match in chat_reew:
                    continue
        
                match_info = user_dict[match]
                match_message = (f"–í–∞—Å –∑—î–¥–Ω–∞–Ω–æ –∑ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º {match_info['name']}, {match_info['age']}, {match_info['location']}\n")

                if match_info['bio']:
                    match_message += match_info['bio']

                partner_message = ( f"–í–∞—Å –∑—î–¥–Ω–∞–Ω–æ –∑ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º\n"
                                f"{profile_info['name']}, {profile_info['age']}, {profile_info['location']}\n\n")
                
                if profile_info['bio']:
                    partner_message += profile_info['bio']

                keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                                keyboard= [                  
                                                    [KeyboardButton(text='–ü—Ä–∏–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É'), KeyboardButton(text='–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ UN')]
                                                ])
                await state.update_data(keyboard_key=keyboard_key)

                chat_reew[chat_id] = match
                chat_reew[match] = chat_id

                src = f"photos/{chat_id}.jpg"
                if os.path.exists(src):
                    with open(src, 'rb') as photo:        
                        await bot.send_photo(match, types.FSInputFile(path=src) ,caption=partner_message, reply_markup=keyboard_key)
                else:
                    await message.answer("–ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∑–±—ñ–≥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


                src = f"photos/{match}.jpg"
                if os.path.exists(src):
                    with open(src, 'rb') as photo:        
                        await bot.send_photo(chat_id, types.FSInputFile(path=src), caption=match_message, reply_markup=keyboard_key)

                else:
                    await message.answer("–ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∑–±—ñ–≥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

                add_chatReew.remove(chat_id)
                add_chatReew.remove(match)
                break
        else:
            if chat_id in add_chatReew:
                check_time = datetime.now().time()
                thous_check = time(18, 0)
                end_time = time(5, 0)

                text_wait = (
                    "üîç –®—É–∫–∞—î–º–æ –¥–ª—è –≤–∞—Å —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞! –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–º–æ ‚Äì –æ–¥—Ä–∞–∑—É –≤–∞—Å –∑'—î–¥–Ω–∞—î–º–æ üòä\n\n"
                    "‚è≥ –í—Ç–æ–º–∏–ª–∏—Å—å —á–µ–∫–∞—Ç–∏? –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ.\n\n"
                    "–Ø —Ç—É—Ç, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø—Ä–∏—î–º–Ω–∏–º! üí¨"
                )
       
                if chat_id not in add_chatReew:
                
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º
                    await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ö–æ–¥–∏—Ç–∏
                    await message.answer(text_wait, parse_mode='HTML')
                    return
                
                if thous_check <= check_time <= end_time:
                    text = f'<b>–¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏ –Ω–∞ –Ω—ñ—á:</b> {random.choice(factNight.list1)}'
                    text_wait += "\n\n" + text
                    await message.answer(text_wait, parse_mode='HTML')
    else:
        keyboard_del = types.ReplyKeyboardRemove()
        await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å /start.", reply_markup=keyboard_del)


@questionnaire_router.message(lambda message: message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ UN')
async def username_send_reew(message: Message, state: FSMContext):
    chat_id = message.chat.id

    if chat_id in user_dict:
        if chat_id in chat_reew:

            partner_id = chat_reew[chat_id]
            chat_id = chat_reew[partner_id]    

            keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                                    keyboard= [ 
                                                                            
                                                        [KeyboardButton(text='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏'), KeyboardButton(text='–í—ñ–¥–º–æ–≤–∏—Ç–∏')]
                                                        
                                                                ])

            await bot.send_message(partner_id, f"–†–æ–∑–º–æ–≤–Ω–∏–∫ –ø—Ä–æ—Å–∏—Ç—å —É –≤–∞—Å username, —á–∏ –≥–æ—Ç–æ–≤—ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?", reply_markup=keyboard_key)
        

@questionnaire_router.message(lambda message: message.text in ['–ù–∞–¥—ñ—Å–ª–∞—Ç–∏', '–í—ñ–¥–º–æ–≤–∏—Ç–∏'])
async def username_send_reew_Yes_NO(message: Message, state: FSMContext):
    chat_id = message.chat.id
    text_message = message.text

    data = await state.get_data()
    keys = data.get('keyboard_key')


    if chat_id in user_dict:
        if chat_id in chat_reew:

            partner_id = chat_reew[chat_id]
            original_chat_id = chat_id
            chat_id = chat_reew[partner_id]  

            if text_message == '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏':
              
                    profile_info = user_dict[chat_id]
                    username_profile = profile_info['username']

                            
                    if profile_info:  
                                
                        username_link = f'https://t.me/{username_profile}   '
                        keyboard = [[InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª—Å', url=username_link)]]
                                
                        key = InlineKeyboardMarkup(inline_keyboard=keyboard)
                        await bot.send_message(partner_id, f"–í–∞—à–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ username: {username_profile}", reply_markup=key)
                        await bot.send_message(chat_id, f"–ë—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∞—à username", reply_markup=keys)

            else:
                if text_message == '–í—ñ–¥–º–æ–≤–∏—Ç–∏':
                    await bot.send_message(original_chat_id, f"–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ username", reply_markup=keys)
                    await bot.send_message(partner_id, f"–í–∞–º –≤—ñ–¥–º–æ–≤–∏–ª–∏ –¥–∞–≤–∞—Ç–∏ username", reply_markup=keys)
        else:
            await bot.send_message(chat_id, f"–í–∏ –Ω—ñ –∑ –∫–∏–º –Ω–µ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—å. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —á–∞—Ç —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ username —Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞")
    else:
        await bot.send_message(chat_id, f"–í–∏—è–≤–∏–ª–æ—Å—å —â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é. –°—Ç–≤–æ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")

@questionnaire_router.message(lambda message: message.text == "–ü—Ä–∏–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É")
async def chat_message_stop(message: Message, state: FSMContext, current_language: str):
    chat_id = message.chat.id
    
    
    if chat_id in user_dict and 'confirm_profiler' in user_dict[chat_id]:
        if chat_id in chat_reew:
            
            partner_id = chat_reew[chat_id]
            chat_id = chat_reew[partner_id]

            await update_data_reew(chat_id)

            Keyboard = [ 
                [InlineKeyboardButton(text='–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å', callback_data="new"), InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏', callback_data="new")], 

            ]
            set_key = InlineKeyboardMarkup(inline_keyboard=Keyboard)

            await bot.send_message(chat_id, "<b>üö™–í–∏ –≤—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—å –≤—ñ–¥ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞</b>\n\n–Ø–∫—â–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –≤–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è ‚Äî –∑–∞–±–ª–æ–∫—É–π—Ç–µ –π–æ–≥–æ\n–Ø–∫—â–æ –ø–æ—Ä—É—à–∏–≤ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –ø–æ—Å–∫–∞—Ä–∂—Ç–µ—Å—å –Ω–∞–º",reply_markup=set_key, parse_mode="HTML")
            
            await bot.send_message(partner_id,"<b>üö™–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è.</b>\n\n–Ø–∫—â–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –≤–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è ‚Äî –∑–∞–±–ª–æ–∫—É–π—Ç–µ –π–æ–≥–æ\n–Ø–∫—â–æ –ø–æ—Ä—É—à–∏–≤ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –ø–æ—Å–∫–∞—Ä–∂—Ç–µ—Å—å –Ω–∞–º\n", reply_markup=set_key, parse_mode="HTML")

            del chat_reew[partner_id]
            del chat_reew[chat_id]
            
            add_chatReew.discard(chat_id)
            add_chatReew.discard(partner_id)
            
            keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                        keyboard=[ 
                                                [KeyboardButton(text='üîé –ü–æ—à—É–∫'), KeyboardButton(text='–ñ–∏–≤—á–∏–∫–∏')],
                                                [KeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')]
                                            ])
            
            profile_info = user_dict[chat_id]
            profile_infos = user_dict[partner_id]

            await bot.send_message(partner_id, f"<b>{profile_infos['name']}</b>, –≤–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é:", reply_markup=keyboard_key, parse_mode='HTML')

            await bot.send_message(chat_id, f"<b>{profile_info['name']}</b>, –≤–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é:", reply_markup=keyboard_key, parse_mode='HTML')
        else:
            await message.answer("–í–∏ –Ω–µ —Ä–æ–∑–º–æ–≤–ª—è—î—Ç–µ –∑ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º")
    else:
        await start.start(message, state, current_language)

@questionnaire_router.message(lambda message: message.text == '–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
async def handle_support(message: Message, state: FSMContext):
    chat_id = message.chat.id

    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞–º")
        return 

    if chat_id in user_dict:
        user_id = user_dict[chat_id]['user_id']
    else:
        user_id = "–ù–µ –≤–∏—è–≤–ª–µ–Ω–æ"

    support_text = (
        f"<b>–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ REEW</b>\n\n"

        f"–ó–≤'—è–∑–æ–∫ –∑ –®–µ—Ä—ñ—Ñ–æ–º: @djdjsjddj\n\n"

        f"üîë ID: <code>{user_id}</code>\n\n"
        f"<i><b>‚ö†Ô∏è –£–≤–∞–≥–∞:</b> –ù—ñ–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤—ñ–π ID –æ–∫—Ä—ñ–º –®–µ—Ä—ñ—Ñ—É.</i>\n\n"
    )

    key_keyboard = [
                    [InlineKeyboardButton(text="üìÑ –ü—Ä–∞–≤–∏–ª–∞", url="https://pypi.org/project/pyTelegramBotAPI/#getting-started")],
                    ]
    kb = InlineKeyboardMarkup(inline_keyboard=key_keyboard)
    await message.answer(support_text, parse_mode = 'HTML', reply_markup=kb)


async def display_menu_global_by_id(message: types.Message, state: FSMContext):
    keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,
                                keyboard=[ 
                                        [KeyboardButton(text='üîé –ü–æ—à—É–∫'), KeyboardButton(text='–ñ–∏–≤—á–∏–∫–∏')],
                                        [KeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')]
                                    ])
    
    return "–≤–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é:", keyboard_key


async def find_partner(chat_id, profile_info, current_language: str):
    potential_matches = []
    current_time = datetime.now()

    if chat_id in user_dict and 'confirm_profiler' in user_dict[chat_id]:
        for user_id, user_data in user_dict.items():

            # Skip the user themselves and check last activity
            if user_id != chat_id and user_id in last_activity and user_id in add_chatReew:
                last_active_time = last_activity[user_id]

                # Check if the user was active in the last 10 minutes
                if (current_time - last_active_time) < timedelta(minutes=1):
                    print(f"Checking user {user_id}, {user_data}, Looking for: {user_data['search_gender']}")
                    print(f"user {chat_id}, {profile_info['gender']}, Looking for: {profile_info['search_gender']}")


                    user_profile_gender = profile_info['gender']  # –°—Ç–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    user_search_gender = profile_info['search_gender']  # –ö–æ–≥–æ —à—É–∫–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

                    topic_chat_user = profile_info['topic_chat']

                    print(f"{user_id} {user_profile_gender}, Looking for: {user_search_gender} {topic_chat_user}")
                    print(f"{chat_id} {user_profile_gender}, Looking for: {user_search_gender} {topic_chat_user}")

                    is_match = any([
                        user_profile_gender == lg.translations[current_language]['boy'] and user_search_gender == lg.translations[current_language]['her'],
                        user_profile_gender == lg.translations[current_language]['girl'] and user_search_gender == lg.translations[current_language]['his'],
                        user_profile_gender == lg.translations[current_language]['boy'] and user_search_gender == lg.translations[current_language]['anything'],
                        user_profile_gender == lg.translations[current_language]['girl'] and user_search_gender == lg.translations[current_language]['anything']
                    ])


                    if is_match:
                        if user_data['gender'] != profile_info['search_gender']:
                            potential_matches.append(user_id)
                            print(f"Match found: {user_data['name']} for {profile_info['name']}")
                            break

        if potential_matches:               
            print(f"Potential matches for {chat_id}: {potential_matches}")
            return potential_matches
        else:
            print(f"No potential matches found for {chat_id}.")
            return []
    else:
        print(f"Chat ID {chat_id} not found in user_dict.")
        return []



@questionnaire_router.message(lambda message: message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫")
async def search_profiles(message: Message, state: FSMContext, current_language: str):
    chat_id = message.chat.id

    if chat_id in chat_reew:
        await bot.send_message(chat_id,"–í–∏ –∑–∞—Ä–∞–∑ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ")
        return 

    if chat_id in user_dict:
        keyboard_key = ReplyKeyboardMarkup(resize_keyboard=True,

            keyboard= [ 
                                                                    
            [KeyboardButton(text='üîé –ü–æ—à—É–∫'), KeyboardButton(text='–ñ–∏–≤—á–∏–∫–∏')],
            [KeyboardButton(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')],

            ])

        await Menu.display_menu_global(message, state, current_language)

        if chat_id in chat_reew:
            partner_id = chat_reew[chat_id]
            del chat_reew[chat_id]
            del chat_reew[partner_id]
                # Send the photo with the profile text and keyboard
            await message.answer("<b>–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –ø–æ—à—É–∫</b>", reply_markup=keyboard_key, parse_mode="HTML") 
    else:
        await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å /start.")

URL_BLOCK = re.compile(r"(https://)")

@dp.message(lambda message: message.text and URL_BLOCK.search(message.text))
async def send_line(message: types.Message, state: FSMContext):
    await message.delete()
    key_board = [ 
        [InlineKeyboardButton(text="–ß–∏—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞", url="https://pypi.org/project/pyTelegramBotAPI/#getting-started")] 
        ]
    ks = InlineKeyboardMarkup(inline_keyboard=key_board) 
    await message.answer("üö´–£ REEW –∑–∞–±–æ—Ä–æ–Ω—è—î—Ç—å—Å—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏", reply_markup=ks)   

NM_BLOCK = re.compile(r"(@)")
@dp.message(lambda message: message.text and NM_BLOCK.search(message.text))
async def block_send_nm(message: Message, state: FSMContext):
    chat_id = message.chat.id

    if chat_id in chat_reew:

        await message.delete()
        await bot.send_message(chat_id, "–ó–∞ –Ω–æ–≤–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ REEW –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ username –≤ —á–∞—Ç")

